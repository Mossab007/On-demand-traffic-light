
ON Demand Traffic Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000c54  00000ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000cea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b7  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086c  00000000  00000000  0000221f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c4e  00000000  00000000  00002a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  000036dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053a  00000000  00000000  000038d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e8  00000000  00000000  00003e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000045fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 50 02 	call	0x4a0	; 0x4a0 <main>
  8a:	0c 94 28 06 	jmp	0xc50	; 0xc50 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint8_t press;

void APP_init(void){

	//Car LED initialization
	LED_init(LED_CAR_PORT,LED_CAR_G_PIN);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_init>
	LED_init(LED_CAR_PORT,LED_CAR_Y_PIN);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_init>
	LED_init(LED_CAR_PORT,LED_CAR_R_PIN);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_init>
	
	//Pedestrian LED initialization
	LED_init(LED_PED_PORT,LED_PED_G_PIN);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_init>
	LED_init(LED_PED_PORT,LED_PED_Y_PIN);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_init>
	LED_init(LED_PED_PORT,LED_PED_R_PIN);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 2f 02 	call	0x45e	; 0x45e <LED_init>
	
	//Button initialization
	BUTTON_init(BUTTON_1_PORT,BUTTON_1_PIN);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	0e 94 16 02 	call	0x42c	; 0x42c <BUTTON_init>
	
	//Timer initialization
	TIMER_init();
  ca:	0e 94 89 03 	call	0x712	; 0x712 <TIMER_init>
	
	//Enable Global interrupts & setup rising edge detection for button
	sei();
  ce:	78 94       	sei
	RISING_EDGE_SETUP();
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	85 bf       	out	0x35, r24	; 53
	SETUP_INT0();
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	8b bf       	out	0x3b, r24	; 59
  dc:	08 95       	ret

000000de <APP_start>:
}
void APP_start(void){
  de:	cf 93       	push	r28
	//variable to be used in for loop
	uint8_t i;
	
	//if normal mode or need transition (i.e. car green led or yellow is on)
	if(normalmode || carLED==0 || carLED==1){
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	81 11       	cpse	r24, r1
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <APP_start+0x18>
  e8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
  ec:	99 23       	and	r25, r25
  ee:	19 f0       	breq	.+6      	; 0xf6 <APP_start+0x18>
  f0:	91 30       	cpi	r25, 0x01	; 1
  f2:	09 f0       	breq	.+2      	; 0xf6 <APP_start+0x18>
  f4:	f9 c0       	rjmp	.+498    	; 0x2e8 <APP_start+0x20a>
		if(!normalmode){
  f6:	81 11       	cpse	r24, r1
  f8:	03 c0       	rjmp	.+6      	; 0x100 <APP_start+0x22>
			carLED=1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		}
		//Configuring Pedestrian LEDs
		LED_off(LED_PED_PORT,LED_PED_G_PIN);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	82 e4       	ldi	r24, 0x42	; 66
 104:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	82 e4       	ldi	r24, 0x42	; 66
 10c:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		//LED_off(LED_PED_PORT,LED_PED_R_PIN);
		
		switch(carLED){
 110:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	21 f1       	breq	.+72     	; 0x160 <APP_start+0x82>
 118:	20 f0       	brcs	.+8      	; 0x122 <APP_start+0x44>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	09 f4       	brne	.+2      	; 0x120 <APP_start+0x42>
 11e:	bd c0       	rjmp	.+378    	; 0x29a <APP_start+0x1bc>
 120:	dc c0       	rjmp	.+440    	; 0x2da <APP_start+0x1fc>
			//Case GREEN LED
			case 0:
			LED_on(LED_CAR_PORT,LED_CAR_G_PIN);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
			LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
			
			for(i=0;i<50;i++){
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	09 c0       	rjmp	.+18     	; 0x150 <APP_start+0x72>
				TIMER_delay(68);
 13e:	84 e4       	ldi	r24, 0x44	; 68
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 8b 03 	call	0x716	; 0x716 <TIMER_delay>
				if(!normalmode)break;//check if ISR was called
 146:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	88 23       	and	r24, r24
 14c:	19 f0       	breq	.+6      	; 0x154 <APP_start+0x76>
			case 0:
			LED_on(LED_CAR_PORT,LED_CAR_G_PIN);
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
			LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
			
			for(i=0;i<50;i++){
 14e:	cf 5f       	subi	r28, 0xFF	; 255
 150:	c2 33       	cpi	r28, 0x32	; 50
 152:	a8 f3       	brcs	.-22     	; 0x13e <APP_start+0x60>
				TIMER_delay(68);
				if(!normalmode)break;//check if ISR was called
			}
			carLED=1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			prevcarLED=0;
 15a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <prevcarLED>
			break;
 15e:	2c c1       	rjmp	.+600    	; 0x3b8 <APP_start+0x2da>
			//Case YELLOW LED
			case 1:
			//if not normalmode then we need to blink both
			
			if(!normalmode){
 160:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 164:	81 11       	cpse	r24, r1
 166:	48 c0       	rjmp	.+144    	; 0x1f8 <APP_start+0x11a>
				if(prevcarLED!=2){
 168:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prevcarLED>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	c9 f1       	breq	.+114    	; 0x1e2 <APP_start+0x104>
                   LED_off(LED_PED_PORT,LED_PED_G_PIN);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
				    LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	81 e4       	ldi	r24, 0x41	; 65
 17c:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
				    LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e4       	ldi	r24, 0x41	; 65
 184:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
					LED_off(LED_PED_PORT,LED_PED_R_PIN);				
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	82 e4       	ldi	r24, 0x42	; 66
 18c:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
					//blink both yellow leds
					for(i=0;i<5;i++){
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	25 c0       	rjmp	.+74     	; 0x1de <APP_start+0x100>
						LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	81 e4       	ldi	r24, 0x41	; 65
 198:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
						LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	82 e4       	ldi	r24, 0x42	; 66
 1a0:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
						TIMER_delay(390);
 1a4:	86 e8       	ldi	r24, 0x86	; 134
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 8b 03 	call	0x716	; 0x716 <TIMER_delay>
						LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	81 e4       	ldi	r24, 0x41	; 65
 1b0:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
						LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	82 e4       	ldi	r24, 0x42	; 66
 1b8:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
						TIMER_delay(190);
 1bc:	8e eb       	ldi	r24, 0xBE	; 190
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 8b 03 	call	0x716	; 0x716 <TIMER_delay>
						LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	81 e4       	ldi	r24, 0x41	; 65
 1c8:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
						LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	82 e4       	ldi	r24, 0x42	; 66
 1d0:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
						TIMER_delay(390);
 1d4:	86 e8       	ldi	r24, 0x86	; 134
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 8b 03 	call	0x716	; 0x716 <TIMER_delay>
                   LED_off(LED_PED_PORT,LED_PED_G_PIN);
				    LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
				    LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
					LED_off(LED_PED_PORT,LED_PED_R_PIN);				
					//blink both yellow leds
					for(i=0;i<5;i++){
 1dc:	cf 5f       	subi	r28, 0xFF	; 255
 1de:	c5 30       	cpi	r28, 0x05	; 5
 1e0:	c8 f2       	brcs	.-78     	; 0x194 <APP_start+0xb6>
						LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
						LED_on(LED_PED_PORT,LED_PED_Y_PIN);
						TIMER_delay(390);
					}
				}
				prevcarLED=1;//to go to Ped lights logic
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
				carLED=2;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	81 e4       	ldi	r24, 0x41	; 65
 1f2:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
 1f6:	35 c0       	rjmp	.+106    	; 0x262 <APP_start+0x184>
				}else{
					LED_off(LED_PED_PORT,LED_PED_G_PIN);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	82 e4       	ldi	r24, 0x42	; 66
 1fc:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
				    LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	81 e4       	ldi	r24, 0x41	; 65
 204:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
				    LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	81 e4       	ldi	r24, 0x41	; 65
 20c:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
					LED_off(LED_PED_PORT,LED_PED_R_PIN);
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	82 e4       	ldi	r24, 0x42	; 66
 214:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
				//blink car yellow led
				for(i=0;i<5;i++){
 218:	c0 e0       	ldi	r28, 0x00	; 0
 21a:	21 c0       	rjmp	.+66     	; 0x25e <APP_start+0x180>
					LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	81 e4       	ldi	r24, 0x41	; 65
 220:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
					TIMER_delay(380);
 224:	8c e7       	ldi	r24, 0x7C	; 124
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 8b 03 	call	0x716	; 0x716 <TIMER_delay>
					LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	81 e4       	ldi	r24, 0x41	; 65
 230:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
					TIMER_delay(180);
 234:	84 eb       	ldi	r24, 0xB4	; 180
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 8b 03 	call	0x716	; 0x716 <TIMER_delay>
					LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	81 e4       	ldi	r24, 0x41	; 65
 240:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
					TIMER_delay(380);
 244:	8c e7       	ldi	r24, 0x7C	; 124
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0e 94 8b 03 	call	0x716	; 0x716 <TIMER_delay>
					if(!normalmode){//check if ISR was called
 24c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 250:	81 11       	cpse	r24, r1
 252:	04 c0       	rjmp	.+8      	; 0x25c <APP_start+0x17e>
						prevcarLED=1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
						break;
 25a:	03 c0       	rjmp	.+6      	; 0x262 <APP_start+0x184>
					LED_off(LED_PED_PORT,LED_PED_G_PIN);
				    LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
				    LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
					LED_off(LED_PED_PORT,LED_PED_R_PIN);
				//blink car yellow led
				for(i=0;i<5;i++){
 25c:	cf 5f       	subi	r28, 0xFF	; 255
 25e:	c5 30       	cpi	r28, 0x05	; 5
 260:	e8 f2       	brcs	.-70     	; 0x21c <APP_start+0x13e>
						prevcarLED=1;
						break;
					}
				}
			}
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	81 e4       	ldi	r24, 0x41	; 65
 266:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
			LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	82 e4       	ldi	r24, 0x42	; 66
 26e:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
			//Configure variables for correct switching
			if(prevcarLED==0){
 272:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prevcarLED>
 276:	81 11       	cpse	r24, r1
 278:	07 c0       	rjmp	.+14     	; 0x288 <APP_start+0x1aa>
				carLED=2;
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				prevcarLED=1;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
 286:	98 c0       	rjmp	.+304    	; 0x3b8 <APP_start+0x2da>
				}else if(prevcarLED==2){
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	09 f0       	breq	.+2      	; 0x28e <APP_start+0x1b0>
 28c:	95 c0       	rjmp	.+298    	; 0x3b8 <APP_start+0x2da>
				carLED=0;
 28e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
				prevcarLED=1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
 298:	8f c0       	rjmp	.+286    	; 0x3b8 <APP_start+0x2da>
			}
			break;
			//Case RED LED
			case 2:
			LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	81 e4       	ldi	r24, 0x41	; 65
 29e:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	81 e4       	ldi	r24, 0x41	; 65
 2a6:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
			LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
 2aa:	62 e0       	ldi	r22, 0x02	; 2
 2ac:	81 e4       	ldi	r24, 0x41	; 65
 2ae:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
			for(i=0;i<50;i++){
 2b2:	c0 e0       	ldi	r28, 0x00	; 0
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <APP_start+0x1ea>
				TIMER_delay(68);
 2b6:	84 e4       	ldi	r24, 0x44	; 68
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 8b 03 	call	0x716	; 0x716 <TIMER_delay>
				if(!normalmode)break;
 2be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c2:	88 23       	and	r24, r24
 2c4:	19 f0       	breq	.+6      	; 0x2cc <APP_start+0x1ee>
			//Case RED LED
			case 2:
			LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
			LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
			for(i=0;i<50;i++){
 2c6:	cf 5f       	subi	r28, 0xFF	; 255
 2c8:	c2 33       	cpi	r28, 0x32	; 50
 2ca:	a8 f3       	brcs	.-22     	; 0x2b6 <APP_start+0x1d8>
				TIMER_delay(68);
				if(!normalmode)break;
			}
			prevcarLED=2;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
			carLED=1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			break;
 2d8:	6f c0       	rjmp	.+222    	; 0x3b8 <APP_start+0x2da>
			default:
			carLED=2;
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			prevcarLED=1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
			break;
 2e6:	68 c0       	rjmp	.+208    	; 0x3b8 <APP_start+0x2da>
		}
		
		}else{
		//Configure PED LEDs
		LED_on(LED_PED_PORT,LED_PED_G_PIN);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	82 e4       	ldi	r24, 0x42	; 66
 2ec:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
		LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	82 e4       	ldi	r24, 0x42	; 66
 2f4:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		LED_off(LED_PED_PORT,LED_PED_R_PIN);
 2f8:	62 e0       	ldi	r22, 0x02	; 2
 2fa:	82 e4       	ldi	r24, 0x42	; 66
 2fc:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		
		//Configure CAR LEDs
		LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	81 e4       	ldi	r24, 0x41	; 65
 304:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	81 e4       	ldi	r24, 0x41	; 65
 30c:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	81 e4       	ldi	r24, 0x41	; 65
 314:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
		TIMER_delay(5000);//5 sec delay
 318:	88 e8       	ldi	r24, 0x88	; 136
 31a:	93 e1       	ldi	r25, 0x13	; 19
 31c:	0e 94 8b 03 	call	0x716	; 0x716 <TIMER_delay>
		
		//make sure car red light is off
		LED_off(LED_PED_PORT,LED_PED_G_PIN);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	82 e4       	ldi	r24, 0x42	; 66
 324:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 328:	62 e0       	ldi	r22, 0x02	; 2
 32a:	81 e4       	ldi	r24, 0x41	; 65
 32c:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	81 e4       	ldi	r24, 0x41	; 65
 334:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		LED_off(LED_PED_PORT,LED_PED_R_PIN);
 338:	62 e0       	ldi	r22, 0x02	; 2
 33a:	82 e4       	ldi	r24, 0x42	; 66
 33c:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		//blink both yellow while ped green is on
		for(i=0;i<5;i++){
 340:	c0 e0       	ldi	r28, 0x00	; 0
 342:	25 c0       	rjmp	.+74     	; 0x38e <APP_start+0x2b0>
			
			LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	81 e4       	ldi	r24, 0x41	; 65
 348:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	82 e4       	ldi	r24, 0x42	; 66
 350:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
			TIMER_delay(390);
 354:	86 e8       	ldi	r24, 0x86	; 134
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 8b 03 	call	0x716	; 0x716 <TIMER_delay>
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	81 e4       	ldi	r24, 0x41	; 65
 360:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
			LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	82 e4       	ldi	r24, 0x42	; 66
 368:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
			TIMER_delay(190);
 36c:	8e eb       	ldi	r24, 0xBE	; 190
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 8b 03 	call	0x716	; 0x716 <TIMER_delay>
			LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	81 e4       	ldi	r24, 0x41	; 65
 378:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	82 e4       	ldi	r24, 0x42	; 66
 380:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
			TIMER_delay(390);
 384:	86 e8       	ldi	r24, 0x86	; 134
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 8b 03 	call	0x716	; 0x716 <TIMER_delay>
		LED_off(LED_PED_PORT,LED_PED_G_PIN);
		LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
		LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
		LED_off(LED_PED_PORT,LED_PED_R_PIN);
		//blink both yellow while ped green is on
		for(i=0;i<5;i++){
 38c:	cf 5f       	subi	r28, 0xFF	; 255
 38e:	c5 30       	cpi	r28, 0x05	; 5
 390:	c8 f2       	brcs	.-78     	; 0x344 <APP_start+0x266>
			LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
			LED_on(LED_PED_PORT,LED_PED_Y_PIN);
			TIMER_delay(390);
		}
		//Turn off yellow LEDs
		LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	81 e4       	ldi	r24, 0x41	; 65
 396:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	82 e4       	ldi	r24, 0x42	; 66
 39e:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		//turn on PED red LED
		LED_on(LED_PED_PORT,LED_PED_R_PIN);
 3a2:	62 e0       	ldi	r22, 0x02	; 2
 3a4:	82 e4       	ldi	r24, 0x42	; 66
 3a6:	0e 94 3a 02 	call	0x474	; 0x474 <LED_on>
		//reset normalmode
		normalmode=1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		//Configure carLED variables
		carLED=0;
 3b0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		prevcarLED=1;
 3b4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
	}
	
}
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <__vector_1>:

ISR(EXT_INT_0){
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
	
	BUTTON_read(BUTTON_1_PORT,BUTTON_1_PIN,&press);
 3de:	43 e6       	ldi	r20, 0x63	; 99
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	84 e4       	ldi	r24, 0x44	; 68
 3e6:	0e 94 21 02 	call	0x442	; 0x442 <BUTTON_read>
	
	if (press>=70)
 3ea:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <press>
 3ee:	86 34       	cpi	r24, 0x46	; 70
 3f0:	30 f0       	brcs	.+12     	; 0x3fe <__vector_1+0x42>
	{
		normalmode=1;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		press=0;
 3f8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <press>
 3fc:	06 c0       	rjmp	.+12     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	}
	else if (press<70)
 3fe:	86 34       	cpi	r24, 0x46	; 70
 400:	20 f4       	brcc	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	{
		normalmode=0;
 402:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		press=0;
 406:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <press>
	}
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	7f 91       	pop	r23
 418:	6f 91       	pop	r22
 41a:	5f 91       	pop	r21
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <BUTTON_init>:
#include "Button.h"

//button initialization
uint32_t BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
	if (DIO_init(buttonPort,buttonPin,INPUT)){
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	0e 94 55 02 	call	0x4aa	; 0x4aa <DIO_init>
 432:	89 2b       	or	r24, r25
 434:	19 f0       	breq	.+6      	; 0x43c <BUTTON_init+0x10>
		return true;
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	08 95       	ret
	}
	else{
		//error handling
		return false;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 440:	08 95       	ret

00000442 <BUTTON_read>:


// button read
uint32_t BUTTON_read(uint8_t buttonPort,uint8_t buttonPin,uint8_t *value)
{
 442:	fa 01       	movw	r30, r20
	//counter for pressing time
	if (READ_BIT(PIND,2))
 444:	82 99       	sbic	0x10, 2	; 16
 446:	06 c0       	rjmp	.+12     	; 0x454 <BUTTON_read+0x12>
	}
	return true;
	}
	else {
		//error handling
		return false;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	08 95       	ret
	if (READ_BIT(PIND,2))
	{
	
	while(READ_BIT(PIND,2))
	{
		++*value;
 44e:	80 81       	ld	r24, Z
 450:	8f 5f       	subi	r24, 0xFF	; 255
 452:	80 83       	st	Z, r24
{
	//counter for pressing time
	if (READ_BIT(PIND,2))
	{
	
	while(READ_BIT(PIND,2))
 454:	82 99       	sbic	0x10, 2	; 16
 456:	fb cf       	rjmp	.-10     	; 0x44e <BUTTON_read+0xc>
	{
		++*value;
	}
	return true;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
	else {
		//error handling
		return false;
	}
	
}
 45c:	08 95       	ret

0000045e <LED_init>:
#include "LED.h"

//LED initialization
uint32_t LED_init(uint8_t ledPort,uint8_t ledPin)
{
	if(DIO_init(ledPort,ledPin,OUTPUT)){
 45e:	41 e0       	ldi	r20, 0x01	; 1
 460:	0e 94 55 02 	call	0x4aa	; 0x4aa <DIO_init>
 464:	89 2b       	or	r24, r25
 466:	19 f0       	breq	.+6      	; 0x46e <LED_init+0x10>
		return true;
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	08 95       	ret
}
	else{
		//error handling
		return false;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 472:	08 95       	ret

00000474 <LED_on>:

//LED turn on
uint32_t LED_on(uint8_t ledPort,uint8_t ledPin)
{
	if(DIO_write(ledPort,ledPin,HIGH)){
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_write>
 47a:	89 2b       	or	r24, r25
 47c:	19 f0       	breq	.+6      	; 0x484 <LED_on+0x10>
			return true;
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	08 95       	ret
}
	else {
		//error handling
			return false;
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 488:	08 95       	ret

0000048a <LED_off>:

//LED turn off
uint32_t LED_off(uint8_t ledPort,uint8_t ledPin)
{
	if(DIO_write(ledPort,ledPin,LOW)){;
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_write>
 490:	89 2b       	or	r24, r25
 492:	19 f0       	breq	.+6      	; 0x49a <LED_off+0x10>
		return true;
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	08 95       	ret
}
	else{
		//error handling
		return false;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
	
}
}
 49e:	08 95       	ret

000004a0 <main>:


#include "Application/App.h"

int main (void){
   APP_init();
 4a0:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>

    while (1) 
    {
		APP_start();
 4a4:	0e 94 6f 00 	call	0xde	; 0xde <APP_start>
 4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <main+0x4>

000004aa <DIO_init>:

// initialize DIO direction

uint32_t DIO_init    (uint8_t PortNum , uint8_t PinNum , uint8_t Direction) 
{
	switch (PortNum)
 4aa:	82 34       	cpi	r24, 0x42	; 66
 4ac:	59 f1       	breq	.+86     	; 0x504 <DIO_init+0x5a>
 4ae:	18 f4       	brcc	.+6      	; 0x4b6 <DIO_init+0xc>
 4b0:	81 34       	cpi	r24, 0x41	; 65
 4b2:	41 f0       	breq	.+16     	; 0x4c4 <DIO_init+0x1a>
 4b4:	85 c0       	rjmp	.+266    	; 0x5c0 <DIO_init+0x116>
 4b6:	83 34       	cpi	r24, 0x43	; 67
 4b8:	09 f4       	brne	.+2      	; 0x4bc <DIO_init+0x12>
 4ba:	44 c0       	rjmp	.+136    	; 0x544 <DIO_init+0x9a>
 4bc:	84 34       	cpi	r24, 0x44	; 68
 4be:	09 f4       	brne	.+2      	; 0x4c2 <DIO_init+0x18>
 4c0:	60 c0       	rjmp	.+192    	; 0x582 <DIO_init+0xd8>
 4c2:	7e c0       	rjmp	.+252    	; 0x5c0 <DIO_init+0x116>
	{
		case PORT_A :
		if (Direction == INPUT)
 4c4:	41 11       	cpse	r20, r1
 4c6:	0e c0       	rjmp	.+28     	; 0x4e4 <DIO_init+0x3a>
		{
			CLR_BIT (DDRA,PinNum);
 4c8:	2a b3       	in	r18, 0x1a	; 26
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_init+0x2a>
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	6a 95       	dec	r22
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_init+0x26>
 4d8:	80 95       	com	r24
 4da:	82 23       	and	r24, r18
 4dc:	8a bb       	out	0x1a, r24	; 26
			return true;
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	08 95       	ret
		}
		else if (Direction == OUTPUT)
 4e4:	41 30       	cpi	r20, 0x01	; 1
 4e6:	09 f0       	breq	.+2      	; 0x4ea <DIO_init+0x40>
 4e8:	6e c0       	rjmp	.+220    	; 0x5c6 <DIO_init+0x11c>
		{
			SET_BIT(DDRA,PinNum);
 4ea:	2a b3       	in	r18, 0x1a	; 26
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_init+0x4c>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_init+0x48>
 4fa:	82 2b       	or	r24, r18
 4fc:	8a bb       	out	0x1a, r24	; 26
			return true;
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	08 95       	ret
		}
		
		break;
		
		case PORT_B :
		if (Direction == INPUT)
 504:	41 11       	cpse	r20, r1
 506:	0e c0       	rjmp	.+28     	; 0x524 <DIO_init+0x7a>
		{
			CLR_BIT (DDRB,PinNum);
 508:	27 b3       	in	r18, 0x17	; 23
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_init+0x6a>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_init+0x66>
 518:	80 95       	com	r24
 51a:	82 23       	and	r24, r18
 51c:	87 bb       	out	0x17, r24	; 23
			return true;
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	08 95       	ret
		}
		else if (Direction == OUTPUT)
 524:	41 30       	cpi	r20, 0x01	; 1
 526:	09 f0       	breq	.+2      	; 0x52a <DIO_init+0x80>
 528:	51 c0       	rjmp	.+162    	; 0x5cc <DIO_init+0x122>
		{
			SET_BIT(DDRB,PinNum);
 52a:	27 b3       	in	r18, 0x17	; 23
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_init+0x8c>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_init+0x88>
 53a:	82 2b       	or	r24, r18
 53c:	87 bb       	out	0x17, r24	; 23
			return true;
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	08 95       	ret
			return false;
		}
		break;
		
		case PORT_C :
		if (Direction == INPUT)
 544:	41 11       	cpse	r20, r1
 546:	0e c0       	rjmp	.+28     	; 0x564 <DIO_init+0xba>
		{
			CLR_BIT (DDRC,PinNum);
 548:	24 b3       	in	r18, 0x14	; 20
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_init+0xaa>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_init+0xa6>
 558:	80 95       	com	r24
 55a:	82 23       	and	r24, r18
 55c:	84 bb       	out	0x14, r24	; 20
			return true;
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	08 95       	ret
		}
		else if (Direction == OUTPUT)
 564:	41 30       	cpi	r20, 0x01	; 1
 566:	a9 f5       	brne	.+106    	; 0x5d2 <DIO_init+0x128>
		{
			SET_BIT(DDRC,PinNum);
 568:	24 b3       	in	r18, 0x14	; 20
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_init+0xca>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	6a 95       	dec	r22
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_init+0xc6>
 578:	82 2b       	or	r24, r18
 57a:	84 bb       	out	0x14, r24	; 20
			return true;
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	08 95       	ret
			return false;
		}
		break;
		
		case PORT_D :
		if (Direction == INPUT)
 582:	41 11       	cpse	r20, r1
 584:	0e c0       	rjmp	.+28     	; 0x5a2 <DIO_init+0xf8>
		{
			CLR_BIT (DDRD,PinNum);
 586:	21 b3       	in	r18, 0x11	; 17
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_init+0xe8>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_init+0xe4>
 596:	80 95       	com	r24
 598:	82 23       	and	r24, r18
 59a:	81 bb       	out	0x11, r24	; 17
			return true;
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	08 95       	ret
		}
		else if (Direction == OUTPUT)
 5a2:	41 30       	cpi	r20, 0x01	; 1
 5a4:	c9 f4       	brne	.+50     	; 0x5d8 <DIO_init+0x12e>
		{
			SET_BIT(DDRD,PinNum);
 5a6:	21 b3       	in	r18, 0x11	; 17
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_init+0x108>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_init+0x104>
 5b6:	82 2b       	or	r24, r18
 5b8:	81 bb       	out	0x11, r24	; 17
			return true;
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	08 95       	ret
		{
			//Error Handling
			return false
		}
		default: //error handling
			return false;
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	08 95       	ret
			SET_BIT(DDRA,PinNum);
			return true;
		}
		else {
			//error handling
			return false;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	08 95       	ret
			return true;
		}
		else
		{
			//Error Handling
			return false;
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	08 95       	ret
			return true;
		}
		else
		{
			//Error Handling
			return false;
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	08 95       	ret
			return true;
		}
		else
		{
			//Error Handling
			return false
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
		}
		default: //error handling
			return false;
	}
	
}
 5dc:	08 95       	ret

000005de <DIO_write>:
uint32_t DIO_write   (uint8_t PortNum , uint8_t PinNum , uint8_t Value)     // write data to DIO
{
	switch (PortNum)
 5de:	82 34       	cpi	r24, 0x42	; 66
 5e0:	59 f1       	breq	.+86     	; 0x638 <DIO_write+0x5a>
 5e2:	18 f4       	brcc	.+6      	; 0x5ea <DIO_write+0xc>
 5e4:	81 34       	cpi	r24, 0x41	; 65
 5e6:	41 f0       	breq	.+16     	; 0x5f8 <DIO_write+0x1a>
 5e8:	85 c0       	rjmp	.+266    	; 0x6f4 <DIO_write+0x116>
 5ea:	83 34       	cpi	r24, 0x43	; 67
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <DIO_write+0x12>
 5ee:	44 c0       	rjmp	.+136    	; 0x678 <DIO_write+0x9a>
 5f0:	84 34       	cpi	r24, 0x44	; 68
 5f2:	09 f4       	brne	.+2      	; 0x5f6 <DIO_write+0x18>
 5f4:	60 c0       	rjmp	.+192    	; 0x6b6 <DIO_write+0xd8>
 5f6:	7e c0       	rjmp	.+252    	; 0x6f4 <DIO_write+0x116>
	{
		case PORT_A :
		if (Value == LOW)
 5f8:	41 11       	cpse	r20, r1
 5fa:	0e c0       	rjmp	.+28     	; 0x618 <DIO_write+0x3a>
		{
			CLR_BIT (PORTA,PinNum);
 5fc:	2b b3       	in	r18, 0x1b	; 27
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_write+0x2a>
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	6a 95       	dec	r22
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_write+0x26>
 60c:	80 95       	com	r24
 60e:	82 23       	and	r24, r18
 610:	8b bb       	out	0x1b, r24	; 27
			return true;
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	08 95       	ret
		}
		else if (Value == HIGH)
 618:	41 30       	cpi	r20, 0x01	; 1
 61a:	09 f0       	breq	.+2      	; 0x61e <DIO_write+0x40>
 61c:	6e c0       	rjmp	.+220    	; 0x6fa <DIO_write+0x11c>
		{
			SET_BIT(PORTA,PinNum);
 61e:	2b b3       	in	r18, 0x1b	; 27
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_write+0x4c>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_write+0x48>
 62e:	82 2b       	or	r24, r18
 630:	8b bb       	out	0x1b, r24	; 27
			return true;
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	08 95       	ret
		}
		
		break;
		
		case PORT_B :
		if (Value == LOW)
 638:	41 11       	cpse	r20, r1
 63a:	0e c0       	rjmp	.+28     	; 0x658 <DIO_write+0x7a>
		{
			CLR_BIT (PORTB,PinNum);
 63c:	28 b3       	in	r18, 0x18	; 24
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_write+0x6a>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_write+0x66>
 64c:	80 95       	com	r24
 64e:	82 23       	and	r24, r18
 650:	88 bb       	out	0x18, r24	; 24
			return true;
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	08 95       	ret
		}
		else if (Value == HIGH)
 658:	41 30       	cpi	r20, 0x01	; 1
 65a:	09 f0       	breq	.+2      	; 0x65e <DIO_write+0x80>
 65c:	51 c0       	rjmp	.+162    	; 0x700 <DIO_write+0x122>
		{
			SET_BIT(PORTB,PinNum);
 65e:	28 b3       	in	r18, 0x18	; 24
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_write+0x8c>
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	6a 95       	dec	r22
 66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_write+0x88>
 66e:	82 2b       	or	r24, r18
 670:	88 bb       	out	0x18, r24	; 24
			return true;
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	08 95       	ret
		}
		
		break;
		
		case PORT_C :
		if (Value == LOW)
 678:	41 11       	cpse	r20, r1
 67a:	0e c0       	rjmp	.+28     	; 0x698 <DIO_write+0xba>
		{
			CLR_BIT (PORTC,PinNum);
 67c:	25 b3       	in	r18, 0x15	; 21
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_write+0xaa>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	6a 95       	dec	r22
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_write+0xa6>
 68c:	80 95       	com	r24
 68e:	82 23       	and	r24, r18
 690:	85 bb       	out	0x15, r24	; 21
			return true;
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	08 95       	ret
		}
		else if (Value == HIGH)
 698:	41 30       	cpi	r20, 0x01	; 1
 69a:	a9 f5       	brne	.+106    	; 0x706 <DIO_write+0x128>
		{
			SET_BIT(PORTC,PinNum);
 69c:	25 b3       	in	r18, 0x15	; 21
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <DIO_write+0xca>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	6a 95       	dec	r22
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <DIO_write+0xc6>
 6ac:	82 2b       	or	r24, r18
 6ae:	85 bb       	out	0x15, r24	; 21
			return true;
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	08 95       	ret
			return false;
		}
		break;
		
		case PORT_D :
		if (Value == LOW)
 6b6:	41 11       	cpse	r20, r1
 6b8:	0e c0       	rjmp	.+28     	; 0x6d6 <DIO_write+0xf8>
		{
			CLR_BIT (PORTD,PinNum);
 6ba:	22 b3       	in	r18, 0x12	; 18
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_write+0xe8>
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	6a 95       	dec	r22
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_write+0xe4>
 6ca:	80 95       	com	r24
 6cc:	82 23       	and	r24, r18
 6ce:	82 bb       	out	0x12, r24	; 18
			return true;
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	08 95       	ret
		}
		else if (Value == HIGH)
 6d6:	41 30       	cpi	r20, 0x01	; 1
 6d8:	c9 f4       	brne	.+50     	; 0x70c <DIO_write+0x12e>
		{
			SET_BIT(PORTD,PinNum);
 6da:	22 b3       	in	r18, 0x12	; 18
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_write+0x108>
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	6a 95       	dec	r22
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_write+0x104>
 6ea:	82 2b       	or	r24, r18
 6ec:	82 bb       	out	0x12, r24	; 18
			return true;
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	08 95       	ret
		{
			//Error Handling
			return false;
		}
		default: //error handling
			return false;
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	08 95       	ret
			SET_BIT(PORTA,PinNum);
			return true;
		}
		else{
			//error handling
			return false;
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	08 95       	ret
		{
			SET_BIT(PORTB,PinNum);
			return true;
		}
		else{
			return false;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	08 95       	ret
			return true;
		}
		else
		{
			//Error Handling
			return false;
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	08 95       	ret
			return true;
		}
		else
		{
			//Error Handling
			return false;
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
		}
		default: //error handling
			return false;
	}
}
 710:	08 95       	ret

00000712 <TIMER_init>:
 712:	13 be       	out	0x33, r1	; 51
 714:	08 95       	ret

00000716 <TIMER_delay>:
 716:	8f 92       	push	r8
 718:	9f 92       	push	r9
 71a:	af 92       	push	r10
 71c:	bf 92       	push	r11
 71e:	cf 92       	push	r12
 720:	df 92       	push	r13
 722:	ef 92       	push	r14
 724:	ff 92       	push	r15
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	ec 01       	movw	r28, r24
 72c:	bc 01       	movw	r22, r24
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 35 05 	call	0xa6a	; 0xa6a <__floatunsisf>
 736:	6b 01       	movw	r12, r22
 738:	7c 01       	movw	r14, r24
 73a:	2f e6       	ldi	r18, 0x6F	; 111
 73c:	32 e1       	ldi	r19, 0x12	; 18
 73e:	43 e8       	ldi	r20, 0x83	; 131
 740:	52 e4       	ldi	r21, 0x42	; 66
 742:	0e 94 8f 04 	call	0x91e	; 0x91e <__cmpsf2>
 746:	88 23       	and	r24, r24
 748:	9c f4       	brge	.+38     	; 0x770 <TIMER_delay+0x5a>
 74a:	a7 01       	movw	r20, r14
 74c:	96 01       	movw	r18, r12
 74e:	6f e6       	ldi	r22, 0x6F	; 111
 750:	72 e1       	ldi	r23, 0x12	; 18
 752:	83 e8       	ldi	r24, 0x83	; 131
 754:	92 e4       	ldi	r25, 0x42	; 66
 756:	0e 94 0b 04 	call	0x816	; 0x816 <__subsf3>
 75a:	2f e6       	ldi	r18, 0x6F	; 111
 75c:	32 e1       	ldi	r19, 0x12	; 18
 75e:	43 e8       	ldi	r20, 0x83	; 131
 760:	5e e3       	ldi	r21, 0x3E	; 62
 762:	0e 94 94 04 	call	0x928	; 0x928 <__divsf3>
 766:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 76a:	c1 e0       	ldi	r28, 0x01	; 1
 76c:	d0 e0       	ldi	r29, 0x00	; 0
 76e:	35 c0       	rjmp	.+106    	; 0x7da <TIMER_delay+0xc4>
 770:	c1 34       	cpi	r28, 0x41	; 65
 772:	d1 05       	cpc	r29, r1
 774:	79 f1       	breq	.+94     	; 0x7d4 <TIMER_delay+0xbe>
 776:	2f e6       	ldi	r18, 0x6F	; 111
 778:	32 e1       	ldi	r19, 0x12	; 18
 77a:	43 e8       	ldi	r20, 0x83	; 131
 77c:	52 e4       	ldi	r21, 0x42	; 66
 77e:	c7 01       	movw	r24, r14
 780:	b6 01       	movw	r22, r12
 782:	0e 94 94 04 	call	0x928	; 0x928 <__divsf3>
 786:	0e 94 78 04 	call	0x8f0	; 0x8f0 <ceil>
 78a:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 78e:	4b 01       	movw	r8, r22
 790:	5c 01       	movw	r10, r24
 792:	eb 01       	movw	r28, r22
 794:	2f e6       	ldi	r18, 0x6F	; 111
 796:	32 e1       	ldi	r19, 0x12	; 18
 798:	43 e8       	ldi	r20, 0x83	; 131
 79a:	5e e3       	ldi	r21, 0x3E	; 62
 79c:	c7 01       	movw	r24, r14
 79e:	b6 01       	movw	r22, r12
 7a0:	0e 94 94 04 	call	0x928	; 0x928 <__divsf3>
 7a4:	6b 01       	movw	r12, r22
 7a6:	7c 01       	movw	r14, r24
 7a8:	b4 01       	movw	r22, r8
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 35 05 	call	0xa6a	; 0xa6a <__floatunsisf>
 7b2:	9b 01       	movw	r18, r22
 7b4:	ac 01       	movw	r20, r24
 7b6:	c7 01       	movw	r24, r14
 7b8:	b6 01       	movw	r22, r12
 7ba:	0e 94 94 04 	call	0x928	; 0x928 <__divsf3>
 7be:	9b 01       	movw	r18, r22
 7c0:	ac 01       	movw	r20, r24
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	80 e8       	ldi	r24, 0x80	; 128
 7c8:	93 e4       	ldi	r25, 0x43	; 67
 7ca:	0e 94 0b 04 	call	0x816	; 0x816 <__subsf3>
 7ce:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <TIMER_delay+0xc4>
 7d4:	60 e0       	ldi	r22, 0x00	; 0
 7d6:	c1 e0       	ldi	r28, 0x01	; 1
 7d8:	d0 e0       	ldi	r29, 0x00	; 0
 7da:	62 bf       	out	0x32, r22	; 50
 7dc:	83 b7       	in	r24, 0x33	; 51
 7de:	84 60       	ori	r24, 0x04	; 4
 7e0:	83 bf       	out	0x33, r24	; 51
 7e2:	20 e0       	ldi	r18, 0x00	; 0
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	08 c0       	rjmp	.+16     	; 0x7f8 <TIMER_delay+0xe2>
 7e8:	08 b6       	in	r0, 0x38	; 56
 7ea:	00 fe       	sbrs	r0, 0
 7ec:	fd cf       	rjmp	.-6      	; 0x7e8 <TIMER_delay+0xd2>
 7ee:	88 b7       	in	r24, 0x38	; 56
 7f0:	81 60       	ori	r24, 0x01	; 1
 7f2:	88 bf       	out	0x38, r24	; 56
 7f4:	2f 5f       	subi	r18, 0xFF	; 255
 7f6:	3f 4f       	sbci	r19, 0xFF	; 255
 7f8:	2c 17       	cp	r18, r28
 7fa:	3d 07       	cpc	r19, r29
 7fc:	a8 f3       	brcs	.-22     	; 0x7e8 <TIMER_delay+0xd2>
 7fe:	13 be       	out	0x33, r1	; 51
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	ff 90       	pop	r15
 806:	ef 90       	pop	r14
 808:	df 90       	pop	r13
 80a:	cf 90       	pop	r12
 80c:	bf 90       	pop	r11
 80e:	af 90       	pop	r10
 810:	9f 90       	pop	r9
 812:	8f 90       	pop	r8
 814:	08 95       	ret

00000816 <__subsf3>:
 816:	50 58       	subi	r21, 0x80	; 128

00000818 <__addsf3>:
 818:	bb 27       	eor	r27, r27
 81a:	aa 27       	eor	r26, r26
 81c:	0e 94 23 04 	call	0x846	; 0x846 <__addsf3x>
 820:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__fp_round>
 824:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fp_pscA>
 828:	38 f0       	brcs	.+14     	; 0x838 <__addsf3+0x20>
 82a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fp_pscB>
 82e:	20 f0       	brcs	.+8      	; 0x838 <__addsf3+0x20>
 830:	39 f4       	brne	.+14     	; 0x840 <__addsf3+0x28>
 832:	9f 3f       	cpi	r25, 0xFF	; 255
 834:	19 f4       	brne	.+6      	; 0x83c <__addsf3+0x24>
 836:	26 f4       	brtc	.+8      	; 0x840 <__addsf3+0x28>
 838:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_nan>
 83c:	0e f4       	brtc	.+2      	; 0x840 <__addsf3+0x28>
 83e:	e0 95       	com	r30
 840:	e7 fb       	bst	r30, 7
 842:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__fp_inf>

00000846 <__addsf3x>:
 846:	e9 2f       	mov	r30, r25
 848:	0e 94 e7 05 	call	0xbce	; 0xbce <__fp_split3>
 84c:	58 f3       	brcs	.-42     	; 0x824 <__addsf3+0xc>
 84e:	ba 17       	cp	r27, r26
 850:	62 07       	cpc	r22, r18
 852:	73 07       	cpc	r23, r19
 854:	84 07       	cpc	r24, r20
 856:	95 07       	cpc	r25, r21
 858:	20 f0       	brcs	.+8      	; 0x862 <__stack+0x3>
 85a:	79 f4       	brne	.+30     	; 0x87a <__stack+0x1b>
 85c:	a6 f5       	brtc	.+104    	; 0x8c6 <__stack+0x67>
 85e:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_zero>
 862:	0e f4       	brtc	.+2      	; 0x866 <__stack+0x7>
 864:	e0 95       	com	r30
 866:	0b 2e       	mov	r0, r27
 868:	ba 2f       	mov	r27, r26
 86a:	a0 2d       	mov	r26, r0
 86c:	0b 01       	movw	r0, r22
 86e:	b9 01       	movw	r22, r18
 870:	90 01       	movw	r18, r0
 872:	0c 01       	movw	r0, r24
 874:	ca 01       	movw	r24, r20
 876:	a0 01       	movw	r20, r0
 878:	11 24       	eor	r1, r1
 87a:	ff 27       	eor	r31, r31
 87c:	59 1b       	sub	r21, r25
 87e:	99 f0       	breq	.+38     	; 0x8a6 <__stack+0x47>
 880:	59 3f       	cpi	r21, 0xF9	; 249
 882:	50 f4       	brcc	.+20     	; 0x898 <__stack+0x39>
 884:	50 3e       	cpi	r21, 0xE0	; 224
 886:	68 f1       	brcs	.+90     	; 0x8e2 <__stack+0x83>
 888:	1a 16       	cp	r1, r26
 88a:	f0 40       	sbci	r31, 0x00	; 0
 88c:	a2 2f       	mov	r26, r18
 88e:	23 2f       	mov	r18, r19
 890:	34 2f       	mov	r19, r20
 892:	44 27       	eor	r20, r20
 894:	58 5f       	subi	r21, 0xF8	; 248
 896:	f3 cf       	rjmp	.-26     	; 0x87e <__stack+0x1f>
 898:	46 95       	lsr	r20
 89a:	37 95       	ror	r19
 89c:	27 95       	ror	r18
 89e:	a7 95       	ror	r26
 8a0:	f0 40       	sbci	r31, 0x00	; 0
 8a2:	53 95       	inc	r21
 8a4:	c9 f7       	brne	.-14     	; 0x898 <__stack+0x39>
 8a6:	7e f4       	brtc	.+30     	; 0x8c6 <__stack+0x67>
 8a8:	1f 16       	cp	r1, r31
 8aa:	ba 0b       	sbc	r27, r26
 8ac:	62 0b       	sbc	r22, r18
 8ae:	73 0b       	sbc	r23, r19
 8b0:	84 0b       	sbc	r24, r20
 8b2:	ba f0       	brmi	.+46     	; 0x8e2 <__stack+0x83>
 8b4:	91 50       	subi	r25, 0x01	; 1
 8b6:	a1 f0       	breq	.+40     	; 0x8e0 <__stack+0x81>
 8b8:	ff 0f       	add	r31, r31
 8ba:	bb 1f       	adc	r27, r27
 8bc:	66 1f       	adc	r22, r22
 8be:	77 1f       	adc	r23, r23
 8c0:	88 1f       	adc	r24, r24
 8c2:	c2 f7       	brpl	.-16     	; 0x8b4 <__stack+0x55>
 8c4:	0e c0       	rjmp	.+28     	; 0x8e2 <__stack+0x83>
 8c6:	ba 0f       	add	r27, r26
 8c8:	62 1f       	adc	r22, r18
 8ca:	73 1f       	adc	r23, r19
 8cc:	84 1f       	adc	r24, r20
 8ce:	48 f4       	brcc	.+18     	; 0x8e2 <__stack+0x83>
 8d0:	87 95       	ror	r24
 8d2:	77 95       	ror	r23
 8d4:	67 95       	ror	r22
 8d6:	b7 95       	ror	r27
 8d8:	f7 95       	ror	r31
 8da:	9e 3f       	cpi	r25, 0xFE	; 254
 8dc:	08 f0       	brcs	.+2      	; 0x8e0 <__stack+0x81>
 8de:	b0 cf       	rjmp	.-160    	; 0x840 <__addsf3+0x28>
 8e0:	93 95       	inc	r25
 8e2:	88 0f       	add	r24, r24
 8e4:	08 f0       	brcs	.+2      	; 0x8e8 <__stack+0x89>
 8e6:	99 27       	eor	r25, r25
 8e8:	ee 0f       	add	r30, r30
 8ea:	97 95       	ror	r25
 8ec:	87 95       	ror	r24
 8ee:	08 95       	ret

000008f0 <ceil>:
 8f0:	0e 94 09 06 	call	0xc12	; 0xc12 <__fp_trunc>
 8f4:	90 f0       	brcs	.+36     	; 0x91a <ceil+0x2a>
 8f6:	9f 37       	cpi	r25, 0x7F	; 127
 8f8:	48 f4       	brcc	.+18     	; 0x90c <ceil+0x1c>
 8fa:	91 11       	cpse	r25, r1
 8fc:	16 f4       	brtc	.+4      	; 0x902 <ceil+0x12>
 8fe:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_szero>
 902:	60 e0       	ldi	r22, 0x00	; 0
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	80 e8       	ldi	r24, 0x80	; 128
 908:	9f e3       	ldi	r25, 0x3F	; 63
 90a:	08 95       	ret
 90c:	26 f0       	brts	.+8      	; 0x916 <ceil+0x26>
 90e:	1b 16       	cp	r1, r27
 910:	61 1d       	adc	r22, r1
 912:	71 1d       	adc	r23, r1
 914:	81 1d       	adc	r24, r1
 916:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_mintl>
 91a:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_mpack>

0000091e <__cmpsf2>:
 91e:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_cmp>
 922:	08 f4       	brcc	.+2      	; 0x926 <__cmpsf2+0x8>
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	08 95       	ret

00000928 <__divsf3>:
 928:	0e 94 a8 04 	call	0x950	; 0x950 <__divsf3x>
 92c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__fp_round>
 930:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fp_pscB>
 934:	58 f0       	brcs	.+22     	; 0x94c <__divsf3+0x24>
 936:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fp_pscA>
 93a:	40 f0       	brcs	.+16     	; 0x94c <__divsf3+0x24>
 93c:	29 f4       	brne	.+10     	; 0x948 <__divsf3+0x20>
 93e:	5f 3f       	cpi	r21, 0xFF	; 255
 940:	29 f0       	breq	.+10     	; 0x94c <__divsf3+0x24>
 942:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__fp_inf>
 946:	51 11       	cpse	r21, r1
 948:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_szero>
 94c:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_nan>

00000950 <__divsf3x>:
 950:	0e 94 e7 05 	call	0xbce	; 0xbce <__fp_split3>
 954:	68 f3       	brcs	.-38     	; 0x930 <__divsf3+0x8>

00000956 <__divsf3_pse>:
 956:	99 23       	and	r25, r25
 958:	b1 f3       	breq	.-20     	; 0x946 <__divsf3+0x1e>
 95a:	55 23       	and	r21, r21
 95c:	91 f3       	breq	.-28     	; 0x942 <__divsf3+0x1a>
 95e:	95 1b       	sub	r25, r21
 960:	55 0b       	sbc	r21, r21
 962:	bb 27       	eor	r27, r27
 964:	aa 27       	eor	r26, r26
 966:	62 17       	cp	r22, r18
 968:	73 07       	cpc	r23, r19
 96a:	84 07       	cpc	r24, r20
 96c:	38 f0       	brcs	.+14     	; 0x97c <__divsf3_pse+0x26>
 96e:	9f 5f       	subi	r25, 0xFF	; 255
 970:	5f 4f       	sbci	r21, 0xFF	; 255
 972:	22 0f       	add	r18, r18
 974:	33 1f       	adc	r19, r19
 976:	44 1f       	adc	r20, r20
 978:	aa 1f       	adc	r26, r26
 97a:	a9 f3       	breq	.-22     	; 0x966 <__divsf3_pse+0x10>
 97c:	35 d0       	rcall	.+106    	; 0x9e8 <__divsf3_pse+0x92>
 97e:	0e 2e       	mov	r0, r30
 980:	3a f0       	brmi	.+14     	; 0x990 <__divsf3_pse+0x3a>
 982:	e0 e8       	ldi	r30, 0x80	; 128
 984:	32 d0       	rcall	.+100    	; 0x9ea <__divsf3_pse+0x94>
 986:	91 50       	subi	r25, 0x01	; 1
 988:	50 40       	sbci	r21, 0x00	; 0
 98a:	e6 95       	lsr	r30
 98c:	00 1c       	adc	r0, r0
 98e:	ca f7       	brpl	.-14     	; 0x982 <__divsf3_pse+0x2c>
 990:	2b d0       	rcall	.+86     	; 0x9e8 <__divsf3_pse+0x92>
 992:	fe 2f       	mov	r31, r30
 994:	29 d0       	rcall	.+82     	; 0x9e8 <__divsf3_pse+0x92>
 996:	66 0f       	add	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	bb 1f       	adc	r27, r27
 99e:	26 17       	cp	r18, r22
 9a0:	37 07       	cpc	r19, r23
 9a2:	48 07       	cpc	r20, r24
 9a4:	ab 07       	cpc	r26, r27
 9a6:	b0 e8       	ldi	r27, 0x80	; 128
 9a8:	09 f0       	breq	.+2      	; 0x9ac <__divsf3_pse+0x56>
 9aa:	bb 0b       	sbc	r27, r27
 9ac:	80 2d       	mov	r24, r0
 9ae:	bf 01       	movw	r22, r30
 9b0:	ff 27       	eor	r31, r31
 9b2:	93 58       	subi	r25, 0x83	; 131
 9b4:	5f 4f       	sbci	r21, 0xFF	; 255
 9b6:	3a f0       	brmi	.+14     	; 0x9c6 <__divsf3_pse+0x70>
 9b8:	9e 3f       	cpi	r25, 0xFE	; 254
 9ba:	51 05       	cpc	r21, r1
 9bc:	78 f0       	brcs	.+30     	; 0x9dc <__divsf3_pse+0x86>
 9be:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__fp_inf>
 9c2:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_szero>
 9c6:	5f 3f       	cpi	r21, 0xFF	; 255
 9c8:	e4 f3       	brlt	.-8      	; 0x9c2 <__divsf3_pse+0x6c>
 9ca:	98 3e       	cpi	r25, 0xE8	; 232
 9cc:	d4 f3       	brlt	.-12     	; 0x9c2 <__divsf3_pse+0x6c>
 9ce:	86 95       	lsr	r24
 9d0:	77 95       	ror	r23
 9d2:	67 95       	ror	r22
 9d4:	b7 95       	ror	r27
 9d6:	f7 95       	ror	r31
 9d8:	9f 5f       	subi	r25, 0xFF	; 255
 9da:	c9 f7       	brne	.-14     	; 0x9ce <__divsf3_pse+0x78>
 9dc:	88 0f       	add	r24, r24
 9de:	91 1d       	adc	r25, r1
 9e0:	96 95       	lsr	r25
 9e2:	87 95       	ror	r24
 9e4:	97 f9       	bld	r25, 7
 9e6:	08 95       	ret
 9e8:	e1 e0       	ldi	r30, 0x01	; 1
 9ea:	66 0f       	add	r22, r22
 9ec:	77 1f       	adc	r23, r23
 9ee:	88 1f       	adc	r24, r24
 9f0:	bb 1f       	adc	r27, r27
 9f2:	62 17       	cp	r22, r18
 9f4:	73 07       	cpc	r23, r19
 9f6:	84 07       	cpc	r24, r20
 9f8:	ba 07       	cpc	r27, r26
 9fa:	20 f0       	brcs	.+8      	; 0xa04 <__divsf3_pse+0xae>
 9fc:	62 1b       	sub	r22, r18
 9fe:	73 0b       	sbc	r23, r19
 a00:	84 0b       	sbc	r24, r20
 a02:	ba 0b       	sbc	r27, r26
 a04:	ee 1f       	adc	r30, r30
 a06:	88 f7       	brcc	.-30     	; 0x9ea <__divsf3_pse+0x94>
 a08:	e0 95       	com	r30
 a0a:	08 95       	ret

00000a0c <__fixunssfsi>:
 a0c:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_splitA>
 a10:	88 f0       	brcs	.+34     	; 0xa34 <__fixunssfsi+0x28>
 a12:	9f 57       	subi	r25, 0x7F	; 127
 a14:	98 f0       	brcs	.+38     	; 0xa3c <__fixunssfsi+0x30>
 a16:	b9 2f       	mov	r27, r25
 a18:	99 27       	eor	r25, r25
 a1a:	b7 51       	subi	r27, 0x17	; 23
 a1c:	b0 f0       	brcs	.+44     	; 0xa4a <__fixunssfsi+0x3e>
 a1e:	e1 f0       	breq	.+56     	; 0xa58 <__fixunssfsi+0x4c>
 a20:	66 0f       	add	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	1a f0       	brmi	.+6      	; 0xa30 <__fixunssfsi+0x24>
 a2a:	ba 95       	dec	r27
 a2c:	c9 f7       	brne	.-14     	; 0xa20 <__fixunssfsi+0x14>
 a2e:	14 c0       	rjmp	.+40     	; 0xa58 <__fixunssfsi+0x4c>
 a30:	b1 30       	cpi	r27, 0x01	; 1
 a32:	91 f0       	breq	.+36     	; 0xa58 <__fixunssfsi+0x4c>
 a34:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_zero>
 a38:	b1 e0       	ldi	r27, 0x01	; 1
 a3a:	08 95       	ret
 a3c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_zero>
 a40:	67 2f       	mov	r22, r23
 a42:	78 2f       	mov	r23, r24
 a44:	88 27       	eor	r24, r24
 a46:	b8 5f       	subi	r27, 0xF8	; 248
 a48:	39 f0       	breq	.+14     	; 0xa58 <__fixunssfsi+0x4c>
 a4a:	b9 3f       	cpi	r27, 0xF9	; 249
 a4c:	cc f3       	brlt	.-14     	; 0xa40 <__fixunssfsi+0x34>
 a4e:	86 95       	lsr	r24
 a50:	77 95       	ror	r23
 a52:	67 95       	ror	r22
 a54:	b3 95       	inc	r27
 a56:	d9 f7       	brne	.-10     	; 0xa4e <__fixunssfsi+0x42>
 a58:	3e f4       	brtc	.+14     	; 0xa68 <__fixunssfsi+0x5c>
 a5a:	90 95       	com	r25
 a5c:	80 95       	com	r24
 a5e:	70 95       	com	r23
 a60:	61 95       	neg	r22
 a62:	7f 4f       	sbci	r23, 0xFF	; 255
 a64:	8f 4f       	sbci	r24, 0xFF	; 255
 a66:	9f 4f       	sbci	r25, 0xFF	; 255
 a68:	08 95       	ret

00000a6a <__floatunsisf>:
 a6a:	e8 94       	clt
 a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__floatsisf+0x12>

00000a6e <__floatsisf>:
 a6e:	97 fb       	bst	r25, 7
 a70:	3e f4       	brtc	.+14     	; 0xa80 <__floatsisf+0x12>
 a72:	90 95       	com	r25
 a74:	80 95       	com	r24
 a76:	70 95       	com	r23
 a78:	61 95       	neg	r22
 a7a:	7f 4f       	sbci	r23, 0xFF	; 255
 a7c:	8f 4f       	sbci	r24, 0xFF	; 255
 a7e:	9f 4f       	sbci	r25, 0xFF	; 255
 a80:	99 23       	and	r25, r25
 a82:	a9 f0       	breq	.+42     	; 0xaae <__floatsisf+0x40>
 a84:	f9 2f       	mov	r31, r25
 a86:	96 e9       	ldi	r25, 0x96	; 150
 a88:	bb 27       	eor	r27, r27
 a8a:	93 95       	inc	r25
 a8c:	f6 95       	lsr	r31
 a8e:	87 95       	ror	r24
 a90:	77 95       	ror	r23
 a92:	67 95       	ror	r22
 a94:	b7 95       	ror	r27
 a96:	f1 11       	cpse	r31, r1
 a98:	f8 cf       	rjmp	.-16     	; 0xa8a <__floatsisf+0x1c>
 a9a:	fa f4       	brpl	.+62     	; 0xada <__floatsisf+0x6c>
 a9c:	bb 0f       	add	r27, r27
 a9e:	11 f4       	brne	.+4      	; 0xaa4 <__floatsisf+0x36>
 aa0:	60 ff       	sbrs	r22, 0
 aa2:	1b c0       	rjmp	.+54     	; 0xada <__floatsisf+0x6c>
 aa4:	6f 5f       	subi	r22, 0xFF	; 255
 aa6:	7f 4f       	sbci	r23, 0xFF	; 255
 aa8:	8f 4f       	sbci	r24, 0xFF	; 255
 aaa:	9f 4f       	sbci	r25, 0xFF	; 255
 aac:	16 c0       	rjmp	.+44     	; 0xada <__floatsisf+0x6c>
 aae:	88 23       	and	r24, r24
 ab0:	11 f0       	breq	.+4      	; 0xab6 <__floatsisf+0x48>
 ab2:	96 e9       	ldi	r25, 0x96	; 150
 ab4:	11 c0       	rjmp	.+34     	; 0xad8 <__floatsisf+0x6a>
 ab6:	77 23       	and	r23, r23
 ab8:	21 f0       	breq	.+8      	; 0xac2 <__floatsisf+0x54>
 aba:	9e e8       	ldi	r25, 0x8E	; 142
 abc:	87 2f       	mov	r24, r23
 abe:	76 2f       	mov	r23, r22
 ac0:	05 c0       	rjmp	.+10     	; 0xacc <__floatsisf+0x5e>
 ac2:	66 23       	and	r22, r22
 ac4:	71 f0       	breq	.+28     	; 0xae2 <__floatsisf+0x74>
 ac6:	96 e8       	ldi	r25, 0x86	; 134
 ac8:	86 2f       	mov	r24, r22
 aca:	70 e0       	ldi	r23, 0x00	; 0
 acc:	60 e0       	ldi	r22, 0x00	; 0
 ace:	2a f0       	brmi	.+10     	; 0xada <__floatsisf+0x6c>
 ad0:	9a 95       	dec	r25
 ad2:	66 0f       	add	r22, r22
 ad4:	77 1f       	adc	r23, r23
 ad6:	88 1f       	adc	r24, r24
 ad8:	da f7       	brpl	.-10     	; 0xad0 <__floatsisf+0x62>
 ada:	88 0f       	add	r24, r24
 adc:	96 95       	lsr	r25
 ade:	87 95       	ror	r24
 ae0:	97 f9       	bld	r25, 7
 ae2:	08 95       	ret

00000ae4 <__fp_cmp>:
 ae4:	99 0f       	add	r25, r25
 ae6:	00 08       	sbc	r0, r0
 ae8:	55 0f       	add	r21, r21
 aea:	aa 0b       	sbc	r26, r26
 aec:	e0 e8       	ldi	r30, 0x80	; 128
 aee:	fe ef       	ldi	r31, 0xFE	; 254
 af0:	16 16       	cp	r1, r22
 af2:	17 06       	cpc	r1, r23
 af4:	e8 07       	cpc	r30, r24
 af6:	f9 07       	cpc	r31, r25
 af8:	c0 f0       	brcs	.+48     	; 0xb2a <__fp_cmp+0x46>
 afa:	12 16       	cp	r1, r18
 afc:	13 06       	cpc	r1, r19
 afe:	e4 07       	cpc	r30, r20
 b00:	f5 07       	cpc	r31, r21
 b02:	98 f0       	brcs	.+38     	; 0xb2a <__fp_cmp+0x46>
 b04:	62 1b       	sub	r22, r18
 b06:	73 0b       	sbc	r23, r19
 b08:	84 0b       	sbc	r24, r20
 b0a:	95 0b       	sbc	r25, r21
 b0c:	39 f4       	brne	.+14     	; 0xb1c <__fp_cmp+0x38>
 b0e:	0a 26       	eor	r0, r26
 b10:	61 f0       	breq	.+24     	; 0xb2a <__fp_cmp+0x46>
 b12:	23 2b       	or	r18, r19
 b14:	24 2b       	or	r18, r20
 b16:	25 2b       	or	r18, r21
 b18:	21 f4       	brne	.+8      	; 0xb22 <__fp_cmp+0x3e>
 b1a:	08 95       	ret
 b1c:	0a 26       	eor	r0, r26
 b1e:	09 f4       	brne	.+2      	; 0xb22 <__fp_cmp+0x3e>
 b20:	a1 40       	sbci	r26, 0x01	; 1
 b22:	a6 95       	lsr	r26
 b24:	8f ef       	ldi	r24, 0xFF	; 255
 b26:	81 1d       	adc	r24, r1
 b28:	81 1d       	adc	r24, r1
 b2a:	08 95       	ret

00000b2c <__fp_inf>:
 b2c:	97 f9       	bld	r25, 7
 b2e:	9f 67       	ori	r25, 0x7F	; 127
 b30:	80 e8       	ldi	r24, 0x80	; 128
 b32:	70 e0       	ldi	r23, 0x00	; 0
 b34:	60 e0       	ldi	r22, 0x00	; 0
 b36:	08 95       	ret

00000b38 <__fp_mintl>:
 b38:	88 23       	and	r24, r24
 b3a:	71 f4       	brne	.+28     	; 0xb58 <__fp_mintl+0x20>
 b3c:	77 23       	and	r23, r23
 b3e:	21 f0       	breq	.+8      	; 0xb48 <__fp_mintl+0x10>
 b40:	98 50       	subi	r25, 0x08	; 8
 b42:	87 2b       	or	r24, r23
 b44:	76 2f       	mov	r23, r22
 b46:	07 c0       	rjmp	.+14     	; 0xb56 <__fp_mintl+0x1e>
 b48:	66 23       	and	r22, r22
 b4a:	11 f4       	brne	.+4      	; 0xb50 <__fp_mintl+0x18>
 b4c:	99 27       	eor	r25, r25
 b4e:	0d c0       	rjmp	.+26     	; 0xb6a <__fp_mintl+0x32>
 b50:	90 51       	subi	r25, 0x10	; 16
 b52:	86 2b       	or	r24, r22
 b54:	70 e0       	ldi	r23, 0x00	; 0
 b56:	60 e0       	ldi	r22, 0x00	; 0
 b58:	2a f0       	brmi	.+10     	; 0xb64 <__fp_mintl+0x2c>
 b5a:	9a 95       	dec	r25
 b5c:	66 0f       	add	r22, r22
 b5e:	77 1f       	adc	r23, r23
 b60:	88 1f       	adc	r24, r24
 b62:	da f7       	brpl	.-10     	; 0xb5a <__fp_mintl+0x22>
 b64:	88 0f       	add	r24, r24
 b66:	96 95       	lsr	r25
 b68:	87 95       	ror	r24
 b6a:	97 f9       	bld	r25, 7
 b6c:	08 95       	ret

00000b6e <__fp_mpack>:
 b6e:	9f 3f       	cpi	r25, 0xFF	; 255
 b70:	31 f0       	breq	.+12     	; 0xb7e <__fp_mpack_finite+0xc>

00000b72 <__fp_mpack_finite>:
 b72:	91 50       	subi	r25, 0x01	; 1
 b74:	20 f4       	brcc	.+8      	; 0xb7e <__fp_mpack_finite+0xc>
 b76:	87 95       	ror	r24
 b78:	77 95       	ror	r23
 b7a:	67 95       	ror	r22
 b7c:	b7 95       	ror	r27
 b7e:	88 0f       	add	r24, r24
 b80:	91 1d       	adc	r25, r1
 b82:	96 95       	lsr	r25
 b84:	87 95       	ror	r24
 b86:	97 f9       	bld	r25, 7
 b88:	08 95       	ret

00000b8a <__fp_nan>:
 b8a:	9f ef       	ldi	r25, 0xFF	; 255
 b8c:	80 ec       	ldi	r24, 0xC0	; 192
 b8e:	08 95       	ret

00000b90 <__fp_pscA>:
 b90:	00 24       	eor	r0, r0
 b92:	0a 94       	dec	r0
 b94:	16 16       	cp	r1, r22
 b96:	17 06       	cpc	r1, r23
 b98:	18 06       	cpc	r1, r24
 b9a:	09 06       	cpc	r0, r25
 b9c:	08 95       	ret

00000b9e <__fp_pscB>:
 b9e:	00 24       	eor	r0, r0
 ba0:	0a 94       	dec	r0
 ba2:	12 16       	cp	r1, r18
 ba4:	13 06       	cpc	r1, r19
 ba6:	14 06       	cpc	r1, r20
 ba8:	05 06       	cpc	r0, r21
 baa:	08 95       	ret

00000bac <__fp_round>:
 bac:	09 2e       	mov	r0, r25
 bae:	03 94       	inc	r0
 bb0:	00 0c       	add	r0, r0
 bb2:	11 f4       	brne	.+4      	; 0xbb8 <__fp_round+0xc>
 bb4:	88 23       	and	r24, r24
 bb6:	52 f0       	brmi	.+20     	; 0xbcc <__fp_round+0x20>
 bb8:	bb 0f       	add	r27, r27
 bba:	40 f4       	brcc	.+16     	; 0xbcc <__fp_round+0x20>
 bbc:	bf 2b       	or	r27, r31
 bbe:	11 f4       	brne	.+4      	; 0xbc4 <__fp_round+0x18>
 bc0:	60 ff       	sbrs	r22, 0
 bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__fp_round+0x20>
 bc4:	6f 5f       	subi	r22, 0xFF	; 255
 bc6:	7f 4f       	sbci	r23, 0xFF	; 255
 bc8:	8f 4f       	sbci	r24, 0xFF	; 255
 bca:	9f 4f       	sbci	r25, 0xFF	; 255
 bcc:	08 95       	ret

00000bce <__fp_split3>:
 bce:	57 fd       	sbrc	r21, 7
 bd0:	90 58       	subi	r25, 0x80	; 128
 bd2:	44 0f       	add	r20, r20
 bd4:	55 1f       	adc	r21, r21
 bd6:	59 f0       	breq	.+22     	; 0xbee <__fp_splitA+0x10>
 bd8:	5f 3f       	cpi	r21, 0xFF	; 255
 bda:	71 f0       	breq	.+28     	; 0xbf8 <__fp_splitA+0x1a>
 bdc:	47 95       	ror	r20

00000bde <__fp_splitA>:
 bde:	88 0f       	add	r24, r24
 be0:	97 fb       	bst	r25, 7
 be2:	99 1f       	adc	r25, r25
 be4:	61 f0       	breq	.+24     	; 0xbfe <__fp_splitA+0x20>
 be6:	9f 3f       	cpi	r25, 0xFF	; 255
 be8:	79 f0       	breq	.+30     	; 0xc08 <__fp_splitA+0x2a>
 bea:	87 95       	ror	r24
 bec:	08 95       	ret
 bee:	12 16       	cp	r1, r18
 bf0:	13 06       	cpc	r1, r19
 bf2:	14 06       	cpc	r1, r20
 bf4:	55 1f       	adc	r21, r21
 bf6:	f2 cf       	rjmp	.-28     	; 0xbdc <__fp_split3+0xe>
 bf8:	46 95       	lsr	r20
 bfa:	f1 df       	rcall	.-30     	; 0xbde <__fp_splitA>
 bfc:	08 c0       	rjmp	.+16     	; 0xc0e <__fp_splitA+0x30>
 bfe:	16 16       	cp	r1, r22
 c00:	17 06       	cpc	r1, r23
 c02:	18 06       	cpc	r1, r24
 c04:	99 1f       	adc	r25, r25
 c06:	f1 cf       	rjmp	.-30     	; 0xbea <__fp_splitA+0xc>
 c08:	86 95       	lsr	r24
 c0a:	71 05       	cpc	r23, r1
 c0c:	61 05       	cpc	r22, r1
 c0e:	08 94       	sec
 c10:	08 95       	ret

00000c12 <__fp_trunc>:
 c12:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_splitA>
 c16:	a0 f0       	brcs	.+40     	; 0xc40 <__fp_trunc+0x2e>
 c18:	be e7       	ldi	r27, 0x7E	; 126
 c1a:	b9 17       	cp	r27, r25
 c1c:	88 f4       	brcc	.+34     	; 0xc40 <__fp_trunc+0x2e>
 c1e:	bb 27       	eor	r27, r27
 c20:	9f 38       	cpi	r25, 0x8F	; 143
 c22:	60 f4       	brcc	.+24     	; 0xc3c <__fp_trunc+0x2a>
 c24:	16 16       	cp	r1, r22
 c26:	b1 1d       	adc	r27, r1
 c28:	67 2f       	mov	r22, r23
 c2a:	78 2f       	mov	r23, r24
 c2c:	88 27       	eor	r24, r24
 c2e:	98 5f       	subi	r25, 0xF8	; 248
 c30:	f7 cf       	rjmp	.-18     	; 0xc20 <__fp_trunc+0xe>
 c32:	86 95       	lsr	r24
 c34:	77 95       	ror	r23
 c36:	67 95       	ror	r22
 c38:	b1 1d       	adc	r27, r1
 c3a:	93 95       	inc	r25
 c3c:	96 39       	cpi	r25, 0x96	; 150
 c3e:	c8 f3       	brcs	.-14     	; 0xc32 <__fp_trunc+0x20>
 c40:	08 95       	ret

00000c42 <__fp_zero>:
 c42:	e8 94       	clt

00000c44 <__fp_szero>:
 c44:	bb 27       	eor	r27, r27
 c46:	66 27       	eor	r22, r22
 c48:	77 27       	eor	r23, r23
 c4a:	cb 01       	movw	r24, r22
 c4c:	97 f9       	bld	r25, 7
 c4e:	08 95       	ret

00000c50 <_exit>:
 c50:	f8 94       	cli

00000c52 <__stop_program>:
 c52:	ff cf       	rjmp	.-2      	; 0xc52 <__stop_program>
